{"ast":null,"code":"var _jsxFileName = \"E:\\\\Study\\\\HK6\\\\CONG-NGHE-INTERNET-OF-THINGS-HIEN-DAI\\\\DA\\\\weatherr\\\\client\\\\src\\\\components\\\\TemperatureChart\\\\TemperatureChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureChart = () => {\n  _s();\n  const [temperatureData, setTemperatureData] = useState(null);\n  const chartRef = useRef(null); // Ref to store the chart instance\n\n  useEffect(() => {\n    // Truy vấn API hoặc dịch vụ dự báo thời tiết ở đây\n    // Đoạn mã này chỉ là một ví dụ giả định\n\n    // Mock data\n    const mockData = {\n      labels: [\"23h\", \"00h\", \"1h\", \"2h\", \"3h\"],\n      datasets: [{\n        label: \"Temperature\",\n        data: [29, 28, 27, 28, 28],\n        // Dữ liệu nhiệt độ (ví dụ)\n        borderColor: \"rgba(255, 255, 255, 1)\",\n        backgroundColor: \"#3eabe4\"\n      }]\n    };\n    setTemperatureData(mockData); // Cập nhật state với dữ liệu giả định\n  }, []);\n  useEffect(() => {\n    // Vẽ biểu đồ khi temperatureData có dữ liệu\n    if (temperatureData) {\n      const ctx = document.getElementById(\"temperatureChart\").getContext(\"2d\");\n\n      // Check if previous chart instance exists and destroy it\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n\n      // Create new chart instance and store it in the ref\n      chartRef.current = new Chart(ctx, {\n        type: \"line\",\n        data: temperatureData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [temperatureData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"temperatureChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"ZO980iKz4Ean/jm9C8MJFFCcvqU=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Chart","jsxDEV","_jsxDEV","TemperatureChart","_s","temperatureData","setTemperatureData","chartRef","mockData","labels","datasets","label","data","borderColor","backgroundColor","ctx","document","getElementById","getContext","current","destroy","type","options","scales","y","beginAtZero","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Study/HK6/CONG-NGHE-INTERNET-OF-THINGS-HIEN-DAI/DA/weatherr/client/src/components/TemperatureChart/TemperatureChart.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nconst TemperatureChart = () => {\r\n  const [temperatureData, setTemperatureData] = useState(null);\r\n  const chartRef = useRef(null); // Ref to store the chart instance\r\n\r\n  useEffect(() => {\r\n    // Truy vấn API hoặc dịch vụ dự báo thời tiết ở đây\r\n    // Đoạn mã này chỉ là một ví dụ giả định\r\n\r\n    // Mock data\r\n    const mockData = {\r\n      labels: [\"23h\", \"00h\", \"1h\", \"2h\", \"3h\"],\r\n      datasets: [\r\n        {\r\n          label: \"Temperature\",\r\n          data: [29, 28, 27, 28, 28], // Dữ liệu nhiệt độ (ví dụ)\r\n          borderColor: \"rgba(255, 255, 255, 1)\",\r\n          backgroundColor: \"#3eabe4\"\r\n        },\r\n      ],\r\n    };\r\n\r\n    setTemperatureData(mockData); // Cập nhật state với dữ liệu giả định\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Vẽ biểu đồ khi temperatureData có dữ liệu\r\n    if (temperatureData) {\r\n      const ctx = document.getElementById(\"temperatureChart\").getContext(\"2d\");\r\n\r\n      // Check if previous chart instance exists and destroy it\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n\r\n      // Create new chart instance and store it in the ref\r\n      chartRef.current = new Chart(ctx, {\r\n        type: \"line\",\r\n        data: temperatureData,\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [temperatureData]);\r\n\r\n  return (\r\n    <div className=\"chartContainer\">\r\n      <canvas id=\"temperatureChart\"></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMS,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/BF,SAAS,CAAC,MAAM;IACd;IACA;;IAEA;IACA,MAAMW,QAAQ,GAAG;MACfC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACxCC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,aAAa;QACpBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAAE;QAC5BC,WAAW,EAAE,wBAAwB;QACrCC,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IAEDR,kBAAkB,CAACE,QAAQ,CAAC,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd;IACA,IAAIQ,eAAe,EAAE;MACnB,MAAMU,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;;MAExE;MACA,IAAIX,QAAQ,CAACY,OAAO,EAAE;QACpBZ,QAAQ,CAACY,OAAO,CAACC,OAAO,CAAC,CAAC;MAC5B;;MAEA;MACAb,QAAQ,CAACY,OAAO,GAAG,IAAInB,KAAK,CAACe,GAAG,EAAE;QAChCM,IAAI,EAAE,MAAM;QACZT,IAAI,EAAEP,eAAe;QACrBiB,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACpB,eAAe,CAAC,CAAC;EAErB,oBACEH,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BzB,OAAA;MAAQ0B,EAAE,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAtDID,gBAAgB;AAAA8B,EAAA,GAAhB9B,gBAAgB;AAwDtB,eAAeA,gBAAgB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}